!function(){var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{},t={},r={},l=e.parcelRequire3642;null==l&&((l=function(e){if(e in t)return t[e].exports;if(e in r){let l=r[e];delete r[e];let s={id:e,exports:{}};return t[e]=s,l.call(s.exports,s,s.exports),s.exports}var l=new Error("Cannot find module '"+e+"'");throw l.code="MODULE_NOT_FOUND",l}).register=function(e,t){r[e]=t},e.parcelRequire3642=l);var s,o=l("4kTxt"),n=(o=l("4kTxt"),{}),i=l("8sHVB"),a=i.GITHUB_PREFIX,c=i.PUBLIC_API_ENDPOINT;const u=(e,t)=>{let r;try{r=localStorage.getItem("".concat(t,"-endpoint"))}catch(e){}return r&&r!==c?0===e.indexOf(r.slice(0,-6)):a.test(e)},h=e=>{if(!e.startsWith("https://gist.github.com/"))return!1;try{const t=new URL(e).pathname.substring(1).split("/");if(2!==t.length)return!1;const r=t[1];if(!/^[a-f0-9]+$/.test(r))return!1}catch(e){return!1}return!0},m=(e,t)=>{const r={url:e};if(h(e))return r.isGist=!0,r.idGist=new URL(e).pathname.substring(1).split("/")[1],r;let l,s;try{l=localStorage.getItem("".concat(t,"-endpoint"))}catch(e){}if(!u(e,t))return r;if(r.isGitHubUrl=!0,s=l&&l!==c?e.replace(l.slice(0,-6),"").split("/"):e.replace(a,"").split("/"),r.owner=s[0],1===s.length)return r.isUser=!0,r;if(r.repo=s[1],!s[2])return r.isRepo=!0,r;switch(s[2]){case"pull":if(s.length>=6&&"commits"===s[4]){r.hash=s[5],r.isCommit=/^[0-9a-f]+$/.test(r.hash);break}r.number=parseInt(s[3],10),r.isPull=r.number>0;break;case"issues":r.number=parseInt(s[3],10),r.isIssue=r.number>0;break;case"commit":r.hash=s[3],r.isCommit=/^[0-9a-f]+$/.test(r.hash);break;case"tree":r.branch=(e=>{const t=/.*?\/.*?\/tree\/([^?]+)/;if(t.test(e.replace(a,""))){const r=t.exec(e.replace(a,""))[1];return encodeURIComponent(r)}return null})(e),r.isBranch=null!=r.branch&&r.branch.length>0;break;case"blob":r.isFile=!0,r.filePath=s.slice(4)}return r};n={isGist:h,isGitHub:u,parse:m,isBranch:(e,t)=>m(e,t).isBranch,isIssue:(e,t)=>m(e,t).isIssue,isCommit:(e,t)=>m(e,t).isCommit,isPull:(e,t)=>m(e,t).isPull,isRepo:(e,t)=>m(e,t).isRepo};var p=l("1oVPi");const d=TrelloPowerUp.Promise;s=(e,t)=>d.try((()=>{const r=e.getContext().board,l=n.parse(t,r);if(!l.isGitHubUrl)throw e.NotHandled("not a github url");return l.isUser?o.getUser(e,l.owner).then((({name:e,type:t,avatar_url:r})=>({isUser:!0,title:e,type:t,avatar:r}))):l.isPull||l.isIssue?d.try((()=>l.isPull?o.getPull(e,l.owner,l.repo,l.number):o.getIssue(e,l.owner,l.repo,l.number))).then((e=>({...l.isPull?{isPull:!0}:{isIssue:!0},number:e.number,url:t,title:e.title,created:Date.parse(e.created_at),createdBy:e.user.login,modified:Date.parse(e.updated_at)}))):l.isCommit?o.getCommit(e,l.owner,l.repo,l.hash).get("commit").then((e=>({author:e.author.name,isCommit:!0,hash:l.hash,url:t,title:p.firstLine(e.message),desc:p.afterFirstLine(e.message),created:Date.parse(e.committer.date),createdBy:e.committer.name}))):l.isRepo?o.getRepo(e,l.owner,l.repo).then((e=>({isRepo:!0,url:t,title:e.full_name,desc:e.description,created:Date.parse(e.created_at),modified:Date.parse(e.updated_at)}))):l.isBranch?o.getBranch(e,l.owner,l.repo,l.branch).then((e=>({isBranch:!0,url:t,title:l.branch,updatedBy:e.commit.author.login}))):l.isFile?o.getFile(e,l.owner,l.repo,l.filePath).then((e=>({isFile:!0,title:e.name,size:e.size,downloadUrl:e.download_url}))):{url:t,title:t}}));var g,b=l("1IKza"),f=(o=l("4kTxt"),l("3OPwS")),_=(b=l("1IKza"),l("K8GvD")),y=(p=l("1oVPi"),l("13ktN"));const w=TrelloPowerUp.Promise,x=TrelloPowerUp.util.relativeUrl,z=e=>t=>w.all([t.attach({url:e.url,name:e.text}).catch((t=>{window.Sentry.withScope((r=>{r.setExtra("urlLength",e.url&&e.url.length),r.setExtra("nameLength",e.text&&e.text.length),window.Sentry.captureException(t)}))})),t.card("name","url").then((r=>t.get("board","shared","disableComments").then((l=>e.commentsUrl&&!l?o.post(t,e.commentsUrl,{body:"![](".concat(x("images/mini-trello-icon.png"),") [").concat(r.name,"](").concat(r.url,")")}):null))))]).then((()=>t.closePopup())),K=(e,t)=>(r,l)=>f.handleErrors(r,(r=>b(r).then((s=>{let o=s;if(l&&l.repo&&(o=[l.repo]),!o||0===o.length)throw new _.InvalidRepo;return r.popup({title:t.getTitle(l)||r.localizeKey("github"),items:(r,l)=>e(r,o,l.search).then((l=>{const s=l.map((e=>y(e,{callback:z(e)})));return f.addChooseOther(r,s,t,K(e,t)),s})),search:t.search})})))),P=(e,t)=>(r,l)=>f.handleErrors(r,(s=>e(s,l).then((o=>{const n=o.map((e=>y(e,{callback:z(e)})));return f.addChooseOther(s,n,t,P(e,t)),s.popup({title:t.getTitle(l)||r.localizeKey("github"),items:n,search:t.search})})))),U=(e,t,r)=>{const l=t.map((e=>e.full_name));return o.searchPullRequests(e,l,r,12).then((e=>e.map((e=>{const r=e;t.length>1&&(r.prefix=r.repository_url.substring(r.repository_url.lastIndexOf("/")+1));const l=r.prefix?"".concat(r.prefix," "):"";return{url:r.html_url,text:"".concat(l,"#").concat(r.number," ").concat(r.title),commentsUrl:r.comments_url}}))))},k=e=>e.get("board","private","branch",null).then((t=>{if(!t)throw new _.InvalidBranch;return o.getRepo(e,t.repo.owner.login,t.repo.name).then((r=>o.getAllCommits(e,r,t.name)))})).map((e=>({url:e.html_url,text:p.firstLine(e.commit.message),commentsUrl:e.comments_url}))).catch(_.NotFound,(()=>{throw new _.InvalidBranch})),I=(e,t,r)=>{const l=t.map((e=>e.full_name));return o.searchIssues(e,l,r,12).then((e=>e.map((e=>{const r=e;t.length>1&&(r.prefix=r.repository_url.substring(r.repository_url.lastIndexOf("/")+1));const l=r.prefix?"".concat(r.prefix," "):"";return{url:r.html_url,text:"".concat(l,"#").concat(r.number," ").concat(r.title),commentsUrl:r.comments_url}}))))},T=(e,t)=>f.getRepoItems(e,(t=>o.getAllBranches(e,t)),t).then((e=>e.map((e=>({url:"".concat(e.repo.html_url,"/tree/").concat(e.item.name),text:e.item.name})))));g=e=>e.popup({title:e.localizeKey("github"),items:[{text:e.localizeKey("attach_branch_ellipsis"),callback:P(T,{getTitle:t=>t&&t.repo?e.localizeKey("branches_from_owner_repo",{owner:t.repo.owner.login,repo:t.repo.name}):e.localizeKey("branches"),chooseRepo:!0,search:{count:10,placeholder:e.localizeKey("search_branches_ellipsis"),empty:e.localizeKey("no_branches_found")}})},{text:e.localizeKey("attach_commit_ellipsis"),callback:P(k,{getTitle:t=>t&&t.branch?e.localizeKey("commits_from_branch",{branch:t.branch.name}):e.localizeKey("commits"),chooseBranch:!0,search:{count:10,placeholder:e.localizeKey("search_commits_ellipsis"),empty:e.localizeKey("no_commits_found")}})},{text:e.localizeKey("attach_issue_ellipsis"),callback:K(I,{getTitle:t=>t&&t.repo?e.localizeKey("issues_from_owner_repo",{owner:t.repo.owner.login,repo:t.repo.name}):e.localizeKey("issues"),chooseRepo:!0,search:{placeholder:e.localizeKey("search_issues_ellipsis"),empty:e.localizeKey("no_issues_found"),searching:e.localizeKey("searching_issues_ellipsis")}})},{text:e.localizeKey("attach_pull_request_ellipsis"),callback:K(U,{getTitle:t=>t&&t.repo?e.localizeKey("pull_requests_from_owner_repo",{owner:t.repo.owner.login,repo:t.repo.name}):e.localizeKey("pull_requests"),chooseRepo:!0,search:{placeholder:e.localizeKey("search_pull_requests_ellipsis"),empty:e.localizeKey("no_pull_requests_found"),searching:e.localizeKey("searching_pull_requests_ellipsis")}})}]});var C;C={defaultLocale:"en",supportedLocales:["cs","de","en","es","fi","fr","hu","it","ja","nb","nl","pl","pt-BR","ru","sv","th","tr","uk","vi","zh-Hans","zh-Hant"],resourceUrl:"./strings/".concat("80a5e13c4025","/{locale}.json")};var R;o=l("4kTxt");const B=TrelloPowerUp.Promise,v=(e,t)=>B.try((()=>{const r=e.getContext().board,l=n.parse(t,r);if(!l.isPull)throw new Error("not a pull request");try{let e=sessionStorage.getItem(t);if(e&&(e=JSON.parse(e)),e&&("closed"===e.state||e.merged))return e}catch(e){}return o.getPull(e,l.owner,l.repo,l.number)})).then((r=>{const l={closed:"closed"===r.state,merged:r.merged,pass:0,fail:0,pending:0,checks:0},s=r.base.repo.full_name.split("/"),n=s[0],i=s[1];if(l.closed||l.merged){if(r.url)try{sessionStorage.setItem(t,JSON.stringify({state:r.state,merged:r.merged,base:{repo:{id:r.base.repo.id,name:r.base.repo.name,full_name:r.base.repo.full_name}},head:{ref:r.head.ref,sha:r.head.sha}}))}catch(e){}return l}return o.getUnifiedStatus(e,n,i,r.head.sha).then((e=>{e.count>0&&(l.checks+=e.count,l.pass+=e.totalSuccess,l.fail+=e.count-e.totalSuccess)})).then((()=>l))}));R={single:v,combined:(e,t)=>B.map(t,(t=>v(e,t))).then((e=>{const t={pass:0,fail:0,pending:0,checks:0,closed:0,merged:0,count:0};return e.forEach((e=>{t.pass+=e.pass,t.fail+=e.fail,t.pending+=e.pending,t.checks+=e.checks,t.closed+=e.closed,t.merged+=e.merged,t.count++})),t}))};p=l("1oVPi"),_=l("K8GvD");const E=TrelloPowerUp.Promise,O="./images/icon.svg",S="./images/pull-request.svg";let H=0;TrelloPowerUp.initialize({"attachment-sections":(e,t)=>{const r=t.entries.filter((e=>n.isGist(e.url)));return o.getEndpoint(e).then((()=>{const l=e.getContext().board,s=t.entries;let i=[{title:e.localizeKey("github_pull_requests"),test:n.isPull,url:"./pull-requests.html",height:72},{title:e.localizeKey("github_issues"),test:n.isIssue,url:"./issues.html",height:64},{title:e.localizeKey("github_commits"),test:n.isCommit,url:"./commits.html",height:45},{title:e.localizeKey("github_branches"),test:n.isBranch,url:"./branches.html",height:64}].map((t=>{const r=s.filter((e=>t.test(e.url,l)));return{claimed:r,icon:O,title:t.title,content:{type:"iframe",url:e.signUrl(t.url),height:t.height?r.length*t.height:void 0}}})).filter((e=>e.claimed.length>0));return r.length>0&&(i=i.concat(r.map((t=>({title:e=>o.getGist(e,n.parse(t.url).idGist).then((e=>Object.keys(e.files)[0])).catch((e=>(console.warn(e),"Gist"))),claimed:[t],icon:O,content:{type:"iframe",url:e.signUrl("./gist".concat(new URL(t.url).pathname)),height:200}}))))),i}))},"attachment-thumbnail":(e,t)=>s(e,t.url).then((t=>{const r=t;return r.image={url:O,logo:!0},r.openText=e.localizeKey("open_in_github"),r})).catch(_,(()=>{throw e.NotHandled()})),"board-buttons":e=>(o.getEndpoint(e),b(e).then((t=>0===t.length?[]:1===t.length?[{icon:O,text:t[0].name,url:t[0].html_url}]:[{icon:O,text:[t.length,"repos"].join(" "),callback:r=>r.popup({title:e.localizeKey("repos"),items:t.map((e=>({text:e.full_name,url:e.html_url})))})}])).catch(_,(()=>[]))),"card-badges":(e,t)=>{const r=t.attachments.map((e=>e.url)),l=[],s=e.getContext().board,o=r.filter((e=>n.isGitHub(e,s)));if(!(o.length>0))return[];l.push({text:o.length,icon:O});const i=r.filter((e=>n.isPull(e,s)));return 0===i.length||l.push({dynamic:()=>H>100?{refresh:10,icon:S,text:e.localizeKey("loading_ellipsis")}:(H+=1,R.combined(e,i).timeout(4e3).then((t=>{if(H-=1,t.closed===t.count){const r=t.merged===t.count?e.localizeKey("merged"):e.localizeKey("closed");return{text:"".concat(t.count," ").concat(r),icon:S}}return t.checks>0?{text:[t.pass,t.checks].join("/"),icon:S,color:p.statColor(t),refresh:p.statRefresh(t)}:{text:t.count,icon:S,refresh:300}})).catch(_,(()=>{throw H-=1,e.NotHandled()})).catch(E.TimeoutError,(()=>(H-=1,{refresh:10,icon:S,text:e.localizeKey("loading_ellipsis")}))))}),l},"card-buttons":e=>e.memberCanWriteToModel("card")?[{icon:O,text:e.localizeKey("github"),callback:g}]:[],"card-detail-badges":e=>o.getEndpoint(e).then((()=>e.card("attachments"))).then((t=>{const r=e.getContext().board,l=t.attachments.map((e=>e.url)).filter((e=>n.isPull(e,r)));return 0===l.length?[]:[{dynamic:()=>R.combined(e,l).then((t=>{if(t.closed!==t.count&&t.checks>0)return{title:e.localizeKey("github_checks"),text:"".concat(t.pass,"/").concat(t.checks," OK"),icon:O,color:p.statColor(t),refresh:p.statRefresh(t)};throw e.NotHandled("no card detail badge necessary")})).catch(_,(()=>{throw e.NotHandled()}))}]})),"card-from-url":(e,t)=>s(e,t.url).then((e=>({name:e.title,desc:e.desc}))).catch(_,(()=>{throw e.NotHandled()})),"format-url":(e,t)=>s(e,t.url).then((t=>{const r={icon:O,text:t.title};return t.isPull?r.subtext=e.localizeKey("pull_request_opened_by_user",{number:t.number,user:t.createdBy}):t.isIssue?r.subtext=e.localizeKey("issue_opened_by_user",{number:t.number,user:t.createdBy}):t.isCommit?r.subtext=e.localizeKey("commit_by_user",{hash:t.hash.slice(0,7),user:t.author}):t.isRepo?r.subtext=t.desc:t.isBranch?r.subtext=e.localizeKey("branch_updated_by_user",{user:t.updatedBy}):t.isUser?(r.subtext=t.type,r.thumbnail=t.avatar):t.isFile&&(r.subtext=p.formatBytesToString(t.size),p.hasFileImageExtension(t.downloadUrl)&&(r.thumbnail=t.downloadUrl)),r})).catch(_,(()=>{throw e.NotHandled()})),"show-settings":e=>e.popup({title:e.localizeKey("github_settings"),url:"settings.html",height:160}),"authorization-status":e=>o.getToken(e).then((e=>({authorized:null!=e}))).catch((()=>({authorized:!1}))),"show-authorization":e=>e.popup({title:e.localizeKey("authorize"),url:"authorize.html",height:140})},{localization:C,Sentry:window.Sentry,targetOrigin:"https://trello.com"})}();
//# sourceMappingURL=index.487e9034.js.map
